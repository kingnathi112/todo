{
	"info": {
		"_postman_id": "c6258a63-2b3e-4e1b-8f05-6607e14f872d",
		"name": "Todo API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Create a random number to create autoincrement\r",
							"var incrementValue = pm.environment.get(\"padding\");\r",
							"if(!incrementValue){\r",
							"    pm.environment.set(\"padding\",10);\r",
							"    incrementValue = pm.environment.get(\"padding\");\r",
							"}\r",
							"pm.environment.set(\"email\", \"kingnathi\" + incrementValue + \"@gmail.com\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ensure The Code Status is 201 [Created]\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure the User is successfully registered\", function(){\r",
							"    let location = pm.response.headers.get(\"Location\");\r",
							"    let stringId = location.substring(location.lastIndexOf(\"/\") + 1);\r",
							"    let Id = parseInt(stringId);\r",
							"    pm.expect(Id >= 1);\r",
							"});\r",
							"\r",
							"//To set parameters to help with easy use of the scripts\r",
							"if(pm.response.code === 201){\r",
							"\r",
							"    //To increment the padding value, to generate new email\r",
							"    let incrementValue = pm.environment.get(\"padding\");\r",
							"    pm.environment.set(\"padding\", ++incrementValue);\r",
							"\r",
							"    //To get a new created ID\r",
							"    let location = pm.response.headers.get(\"Location\");\r",
							"    let userId = location.substring(location.lastIndexOf(\"/\") + 1);\r",
							"    pm.environment.set(\"new-user-id\", userId);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n    \"firstName\": \"Nkosinathi\",\n    \"lastName\": \"Mlotshwa\",\n    \"username\": \"{{username}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"test1234$\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authenticate User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ensure the Code Status is 200 [OK]\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let response = pm.response.json();",
							"",
							"pm.test(\"Ensure that the Token is returned\", function(){",
							"    pm.expect(response.token != \"\");",
							"    pm.environment.set('normal-user-token', response.token);",
							"});",
							"",
							"pm.test(\"Ensure that the Expiry date is returned\", function(){",
							"    pm.expect(response.expires != \"\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/auth",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authenticate Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ensure the Code Status is 200 [OK]\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let response = pm.response.json();",
							"pm.test(\"Ensure that the Token is returned\", function(){",
							"    pm.expect(response.token != \"\");",
							"    pm.environment.set('admin-token', response.token);",
							"});",
							"",
							"pm.test(\"Ensure that the Expiry date is returned\", function(){",
							"    pm.expect(response.expires != \"\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{admin-email}}\",\n    \"password\": \"{{admin-password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/auth",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ensure the Code Status is 200 [OK]\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"pm.test(\"Ensure User Id matches parsed Id\", function(){\r",
							"    pm.expect(response.id).to.eql(parseInt(pm.environment.get(\"new-user-id\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Username is correct\", function(){\r",
							"    pm.expect(response.username).to.be.eql(pm.environment.get(\"email\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Email is correct\", function(){\r",
							"    pm.expect(response.email).to.be.eql(pm.environment.get(\"email\"));;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{admin-token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5000/api/users/{{new-user-id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"users",
						"{{new-user-id}}"
					]
				},
				"description": "Get user by id\n\nMust be admin\nCan only retrieve yourself, i.e., the logged in use"
			},
			"response": []
		},
		{
			"name": "Create Todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ensure the Code Status is 201 [Created]\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Todo item has been created\", function(){\r",
							"    let location = pm.response.headers.get(\"Location\");\r",
							"    let stringId = location.substring(location.lastIndexOf(\"/\") + 1);\r",
							"    let Id = parseInt(stringId);\r",
							"    pm.expect(Id >= 1);\r",
							"});\r",
							"//Set todo-id\r",
							"if(pm.response.code === 201){\r",
							"    //To get a new created ID\r",
							"    let location = pm.response.headers.get(\"Location\");\r",
							"    let toId = location.substring(location.lastIndexOf(\"/\") + 1);\r",
							"    pm.environment.set(\"todo-id\", toId);\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let todoPadding = pm.environment.get(\"todo-padding\");\r",
							"let moment = require('moment');\r",
							"if(!todoPadding){\r",
							"    pm.environment.set(\"todo-padding\", 12);\r",
							"    todoPadding = pm.environment.get(\"todo-padding\");\r",
							"}\r",
							"pm.environment.set(\"todo-padding\", ++todoPadding);\r",
							"pm.environment.set(\"title\", pm.environment.get(\"email\") + \"_Todo\");\r",
							"pm.environment.set(\"description\", \"Writing a postman test for this todo_\" + pm.environment.get(\"todo-padding\"));\r",
							"pm.environment.set(\"is-complete\", \"false\");\r",
							"pm.environment.set(\"update-date\", moment().format(\"YYYY-MM-DD\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{normal-user-token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"Title\": \"{{title}}\",\n    \"Description\": \"{{description}}\",\n    \"IsComplete\": \"{{is-complete}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/todos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get todo by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ensure the Code Status is 200 [OK]\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"pm.test(\"Ensure Title is correct\", function(){\r",
							"    pm.expect(response.title).to.eql(pm.environment.get(\"title\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Description is correct\", function(){\r",
							"    pm.expect(response.description).to.eql(pm.environment.get(\"description\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure IsComplete is false\", function(){\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.isComplete).to.be.false;\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure User Id matches parsed Id\", function(){\r",
							"    pm.expect(response.user.id).to.eql(parseInt(pm.environment.get(\"new-user-id\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Username is correct\", function(){\r",
							"    pm.expect(response.user.email).to.be.eql(pm.environment.get(\"email\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Email is correct\", function(){\r",
							"    pm.expect(response.user.email).to.be.eql(pm.environment.get(\"email\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{normal-user-token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5000/api/todos/{{todo-id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"todos",
						"{{todo-id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all todos (authorized in user)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ensure the Code Status is 200 [OK]\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var moment = require('moment');\r",
							"let allTodos = pm.response.json();\r",
							"let lastAddedTodo = allTodos[allTodos.length - 1];\r",
							"\r",
							"pm.test(\"Ensure Title is correct\", function(){\r",
							"    pm.expect(lastAddedTodo.title).to.eql(pm.environment.get(\"title\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Description is correct\", function(){\r",
							"    pm.expect(lastAddedTodo.description).to.eql(pm.environment.get(\"description\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure IsComplete is false\", function(){\r",
							"    pm.expect(lastAddedTodo.isComplete).to.be.false;\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Last Update Date is correct\", function(){\r",
							"    let lastUpdated = new Date(lastAddedTodo.lastUpdate);\r",
							"    pm.expect(moment(lastUpdated).format(\"YYYY-MM-DD\")).to.eql(pm.environment.get(\"update-date\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{normal-user-token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/todos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update todo",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let moment = require('moment');\r",
							"pm.environment.set(\"title\", pm.environment.get(\"title\") + \"_\" + moment().format((\"YYYY-MM-DD\")));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ensure the Code Status is 200 [OK]\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{normal-user-token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{title}}\",\n    \"description\": \"{{description}}\",\n    \"isComplete\": {{is-complete}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/todos/{{todo-id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"todos",
						"{{todo-id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get todo by Id [Updated]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ensure the Code Status is 200 [OK]\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"pm.test(\"Ensure Title is correct\", function(){\r",
							"    pm.expect(response.title).to.eql(pm.environment.get(\"title\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Description is correct\", function(){\r",
							"    pm.expect(response.description).to.eql(pm.environment.get(\"description\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure IsComplete is false\", function(){\r",
							"    pm.expect(response.isComplete).to.be.false;\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure User Id matches parsed Id\", function(){\r",
							"    pm.expect(response.user.id).to.eql(parseInt(pm.environment.get(\"new-user-id\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Username is correct\", function(){\r",
							"    pm.expect(response.user.username).to.be.eql(pm.environment.get(\"email\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Email is correct\", function(){\r",
							"    pm.expect(response.user.email).to.be.eql(pm.environment.get(\"email\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{normal-user-token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5000/api/todos/{{todo-id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"todos",
						"{{todo-id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update IsComplete field",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ensure the Code Status is 200 [OK]\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{normal-user-token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"Value\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/todos/{{todo-id}}/IsComplete",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"todos",
						"{{todo-id}}",
						"IsComplete"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get todo by Id [Updated isComplete]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ensure the Code Status is 200 [OK]\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"pm.test(\"Ensure Title is correct\", function(){\r",
							"    pm.expect(response.title).to.eql(pm.environment.get(\"title\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Description is correct\", function(){\r",
							"    pm.expect(response.description).to.eql(pm.environment.get(\"description\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure IsComplete is true\", function(){\r",
							"    pm.expect(response.isComplete).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure User Id matches parsed Id\", function(){\r",
							"    pm.expect(response.user.id).to.eql(parseInt(pm.environment.get(\"new-user-id\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Username is correct\", function(){\r",
							"    pm.expect(response.user.username).to.be.eql(pm.environment.get(\"email\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Email is correct\", function(){\r",
							"    pm.expect(response.user.email).to.be.eql(pm.environment.get(\"email\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{normal-user-token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5000/api/todos/{{todo-id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"todos",
						"{{todo-id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ensure the Code Status is 200 [OK]\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let response = pm.response.json();\r",
							"pm.test(\"Ensure Title is correct\", function(){\r",
							"    pm.expect(response.title).to.eql(pm.environment.get(\"title\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Description is correct\", function(){\r",
							"    pm.expect(response.description).to.eql(pm.environment.get(\"description\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure IsComplete is true\", function(){\r",
							"    pm.expect(response.isComplete).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{normal-user-token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5000/api/todos/{{todo-id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"todos",
						"{{todo-id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users (Admin only)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ensure the Code Status is 200 [OK]\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let allUsers = pm.response.json();\r",
							"let lastAddedUser = allUsers[allUsers.length - 1];\r",
							"\r",
							"pm.test(\"User Id is correct\", function(){\r",
							"    pm.expect(lastAddedUser.id).to.eql(parseInt(pm.environment.get(\"new-user-id\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Username is correct\", function(){\r",
							"    pm.expect(lastAddedUser.username).to.be.eql(pm.environment.get(\"email\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Ensure Email is correct\", function(){\r",
							"    pm.expect(lastAddedUser.email).to.be.eql(pm.environment.get(\"email\"));;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "bearer {{admin-token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "auth-token",
			"value": ""
		},
		{
			"key": "admin-token",
			"value": ""
		}
	]
}